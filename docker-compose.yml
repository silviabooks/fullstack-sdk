version: "3.8"
services:
  ###
  ### APPS
  ###

  auth:
    build:
      context: ./apps/auth
      dockerfile: Dockerfile.dev
    ports:
      - "${AUTH_PORT:-4040}:8080"
    volumes:
      - ./apps/auth/src:/usr/src/app/src:delegated
      - ./apps/auth/package.json:/usr/src/app/package.json
      - ./apps/auth/package-lock.json:/usr/src/app/package-lock.json
    environment:
      PGSTRING: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@auth-db:5432/postgres
      JWT_SECRET: ${HASURA_JWT_SECRET:-h2leOvdgjwpV0As5L8rZlV3VDVOsOmwk}
      JWT_DURATION: "5m"
    restart: unless-stopped
    depends_on:
      auth-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://auth:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 20

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.dev
    ports:
      - "${BACKEND_PORT:-4050}:8080"
    volumes:
      - ./apps/backend/src:/usr/src/app/src:delegated
      - ./apps/backend/package.json:/usr/src/app/package.json
      - ./apps/backend/package-lock.json:/usr/src/app/package-lock.json
    # environment:
    #   PGSTRING: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@hasura-db:5432/postgres
    # depends_on:
    #   hasura-db:
    #     condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://backend:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 20

  ###
  ### TESTS
  ###

  auth-test:
    build:
      context: ./apps/auth
      dockerfile: Dockerfile.dev
    environment:
      TEST_URL: http://auth:8080
    volumes:
      - ./apps/auth/src:/usr/src/app/src:delegated
      - ./apps/auth/test:/usr/src/app/test:delegated
      - ./apps/auth/jest.config:/usr/src/app/jest.config:delegated
    entrypoint: ["npm", "run", "test"]
    tty: true
    depends_on:
      auth:
        condition: service_healthy

  ###
  ### SERVICES
  ###

  hasura-engine:
    build:
      context: ./services/hasura-engine
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_SECRET:-hasura}"
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@hasura-db:5432/postgres
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256", "key": "${HASURA_JWT_SECRET:-h2leOvdgjwpV0As5L8rZlV3VDVOsOmwk}"}'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
    restart: unless-stopped
    depends_on:
      hasura-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-qO", "-", "http://localhost:8080/healthz"]
      interval: 5s
      timeout: 3s
      retries: 5

  hasura-db:
    build:
      context: ./services/hasura-db
      dockerfile: Dockerfile.dev
    ports:
      - "${HASURA_DB_PORT:-5432}:5432"
    volumes:
      - .docker-data/hasura-db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20

  auth-db:
    build:
      context: ./services/hasura-db
      dockerfile: Dockerfile.dev
    ports:
      - "${AUTH_DB_PORT:-5433}:5432"
    volumes:
      - .docker-data/auth-db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20

  ###
  ### UTILITIES
  ###

  adminer:
    image: adminer:4.7
    links:
      - hasura-db:postgres
    ports:
      - "${ADMINER_PORT:-8008}:8080"
    restart: unless-stopped
    depends_on:
      hasura-db:
        condition: service_healthy

  hasura-console:
    build:
      context: ./services/hasura-console
      dockerfile: Dockerfile.dev
    ports:
      - "9693:9693"
      - "9695:9695"
    volumes:
      - ./services/migrations:/usr/src/hasura/app
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@hasura-db:5432/postgres
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_SECRET:-hasura}"
      HASURA_GRAPHQL_ENDPOINT: http://127.0.0.1:8080
      HASURA_APPLY_MIGRATIONS: "true"
      HASURA_APPLY_METADATA: "true"
      HASURA_APPLY_SEEDS: "true"
      HASURA_RUN_CONSOLE: "true"
    restart: unless-stopped
    depends_on:
      hasura-engine:
        condition: service_healthy

  hasura-apply:
    build:
      context: ./services/hasura-console
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/migrations:/usr/src/hasura/app
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@hasura-db:5432/postgres
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_SECRET:-hasura}"
      HASURA_GRAPHQL_ENDPOINT: http://127.0.0.1:8080
      HASURA_APPLY_MIGRATIONS: "true"
      HASURA_APPLY_METADATA: "true"
      HASURA_APPLY_SEEDS: "true"
    depends_on:
      hasura-engine:
        condition: service_healthy

  hasura-export:
    build:
      context: ./services/hasura-console
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/migrations:/usr/src/hasura/app
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@hasura-db:5432/postgres
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_SECRET:-hasura}"
      HASURA_GRAPHQL_ENDPOINT: http://127.0.0.1:8080
      HASURA_EXPORT_METADATA: "true"
      HASURA_EXPORT_DATABASE: "false"
    depends_on:
      hasura-engine:
        condition: service_healthy
